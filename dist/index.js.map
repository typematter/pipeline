{"version":3,"sources":["../src/lib/failure.ts","../src/lib/success.ts","../src/lib/compose.ts","../src/lib/resolve.ts"],"names":[],"mappings":";AAKA,IAAM,aAAA,GAAN,cAA4B,KAAM,CAAA;AAAA,EACjC,YAAY,OAAiB,EAAA;AAC5B,IAAA,KAAA,CAAM,OAAO,CAAA;AACb,IAAA,IAAA,CAAK,IAAO,GAAA,eAAA;AAAA;AAEd,CAAA;AA4BM,IAAA,OAAA,GAAU,CAAI,KAA8C,MAAA;AAAA,EACjE,EAAI,EAAA,KAAA;AAAA,EACJ,KACC,EAAA,KAAA,YAAiB,aACd,GAAA,KAAA,GACA,IAAI,aAAA,CAAc,KAAiB,YAAA,KAAA,GAAQ,KAAM,CAAA,OAAA,GAAU,MAAO,CAAA,KAAK,CAAC;AAC7E,CAAA;;;ACtBA,IAAM,OAAA,GAAU,CAAI,KAAyB,MAAA;AAAA,EAC5C,EAAI,EAAA,IAAA;AAAA,EACJ;AACD,CAAA,CAAA;AAEA,IAAO,eAAQ,GAAA;;;ACKf,IAAM,OACL,GAAA,CAAA,GAAI,MACJ,KAAA,OAAO,OAA+D,KAAA;AACrE,EAAA,IAAI,cAAiB,GAAA,OAAA;AAErB,EAAA,KAAA,MAAW,SAAS,MAAQ,EAAA;AAC3B,IAAI,IAAA;AACH,MAAM,MAAA,MAAA,GAAS,MAAM,KAAA,CAAM,cAAc,CAAA;AAEzC,MAAA,IAAI,OAAO,EAAI,EAAA;AACd,QAAA,cAAA,GAAiB,MAAO,CAAA,KAAA;AAAA,OAClB,MAAA;AACN,QAAO,OAAA,MAAA;AAAA;AACR,aACQ,KAAO,EAAA;AACf,MAAA,OAAO,QAAQ,KAAK,CAAA;AAAA;AACrB;AAGD,EAAA,OAAO,gBAAQ,cAAc,CAAA;AAC9B,CAAA;AAED,IAAO,eAAQ,GAAA;;;ACpDf,IAAM,OAAA,GAA6C,CAAC,MAAW,KAAA;AAC9D,EAAA,IAAI,OAAO,EAAI,EAAA;AACd,IAAA,OAAO,MAAO,CAAA,KAAA;AAAA,GACR,MAAA;AACN,IAAA,MAAM,MAAO,CAAA,KAAA;AAAA;AAEf,CAAA;AAEA,IAAO,eAAQ,GAAA","file":"index.js","sourcesContent":["import type { Result } from '$types/result.js';\n\n/**\n * Custom error class for pipeline errors.\n */\nclass PipelineError extends Error {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = 'PipelineError';\n\t}\n}\n\n/**\n * Creates a failure result object.\n *\n * This function is used to wrap an error in a `Result` object indicating a failed operation.\n * The resulting object will have the `ok` property set to `false` and the `error` property set to the provided error.\n * If the provided error is not an instance of `PipelineError`, it will be wrapped in a `PipelineError`.\n *\n * @template T - The type of the value that would have been returned on success.\n * @param {unknown} error - The error to wrap in a failure result.\n * @returns {Result<T, PipelineError>} An object representing a failure result containing the provided error.\n *\n * @example\n * // Creating a failure result with a custom error\n * const result = failure(new PipelineError('Something went wrong'));\n * console.log(result); // { ok: false, error: PipelineError: Something went wrong }\n *\n * @example\n * // Creating a failure result with a generic error\n * const result = failure(new Error('Generic error'));\n * console.log(result); // { ok: false, error: PipelineError: Generic error }\n *\n * @example\n * // Creating a failure result with a string error\n * const result = failure('String error');\n * console.log(result); // { ok: false, error: PipelineError: String error }\n */\nconst failure = <T>(error: unknown): Result<T, PipelineError> => ({\n\tok: false,\n\terror:\n\t\terror instanceof PipelineError\n\t\t\t? error\n\t\t\t: new PipelineError(error instanceof Error ? error.message : String(error))\n});\n\nexport { failure as default, PipelineError };\n","import type { Result } from '$types/result.js';\n\n/**\n * Creates a successful result object.\n *\n * This function is used to wrap a value in a `Result` object indicating a successful operation.\n * The resulting object will have the `ok` property set to `true` and the `value` property set to the provided value.\n *\n * @template T - The type of the value being wrapped.\n * @param {T} value - The value to wrap in a successful result.\n * @returns {Result<T>} An object representing a successful result containing the provided value.\n *\n * @example\n * // Creating a successful result with a string value\n * const result = success('Operation completed successfully');\n * console.log(result); // { ok: true, value: 'Operation completed successfully' }\n *\n * @example\n * // Creating a successful result with an object value\n * const result = success({ id: 1, name: 'John Doe' });\n * console.log(result); // { ok: true, value: { id: 1, name: 'John Doe' } }\n */\nconst success = <T>(value: T): Result<T> => ({\n\tok: true,\n\tvalue\n});\n\nexport default success;\n","import type { PipelineContext } from '$types/pipeline-context.js';\nimport type { PipelineStage } from '$types/pipeline-stage.js';\nimport type { Result } from '$types/result.js';\nimport failure from './failure.js';\nimport success from './success.js';\n\n/**\n * Composes multiple pipeline stages into a single pipeline function.\n *\n * This function takes multiple `PipelineStage` functions and returns a new `PipelineStage` function\n * that executes the provided stages in sequence. Each stage receives the context from the previous stage.\n * If any stage fails, the pipeline stops and returns the failure result.\n *\n * @param {...PipelineStage[]} stages - The pipeline stages to compose.\n * @returns {PipelineStage} A composed pipeline stage function.\n *\n * @example\n * // Define some pipeline stages\n * const stage1: PipelineStage = async (context) => success({ ...context, step1: true });\n * const stage2: PipelineStage = async (context) => success({ ...context, step2: true });\n *\n * // Compose the stages into a single pipeline\n * const pipeline = compose(stage1, stage2);\n *\n * // Execute the pipeline\n * const result = await pipeline({});\n * if (result.ok) {\n *   console.log(result.value); // { step1: true, step2: true }\n * } else {\n *   console.error(result.error);\n * }\n */\nconst compose =\n\t(...stages: PipelineStage[]): PipelineStage =>\n\tasync (context: PipelineContext): Promise<Result<PipelineContext>> => {\n\t\tlet currentContext = context;\n\n\t\tfor (const stage of stages) {\n\t\t\ttry {\n\t\t\t\tconst result = await stage(currentContext);\n\n\t\t\t\tif (result.ok) {\n\t\t\t\t\tcurrentContext = result.value;\n\t\t\t\t} else {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\treturn failure(error);\n\t\t\t}\n\t\t}\n\n\t\treturn success(currentContext);\n\t};\n\nexport default compose;\n","import type { Result } from '$types/result.js';\n\nconst resolve: <T, E>(result: Result<T, E>) => T = (result) => {\n\tif (result.ok) {\n\t\treturn result.value;\n\t} else {\n\t\tthrow result.error;\n\t}\n};\n\nexport default resolve;\n"]}